def generate_parentheses(n):
    def backtrack(current, open_count, close_count):
        if len(current) == 2 * n:
            combinations.append("".join(current))
            return
        
        if open_count < n:
            current.append('(')
            backtrack(current, open_count + 1, close_count)
            current.pop()
        
        if close_count < open_count:
            current.append(')')
            backtrack(current, open_count, close_count + 1)
            current.pop()

    combinations = []
    backtrack([], 0, 0)
    return combinations

# Test cases
test_cases = [3, 1]
expected_outputs = [
    ["((()))","(()())","(())()","()(())","()()()"],
    ["()"]
]

# Run and print test cases
for i, n in enumerate(test_cases):
    result = generate_parentheses(n)
    print(f"Input: n = {n}")
    print(f"Output: {result}")
    print(f"Expected: {expected_outputs[i]}")
    print(f"Test {'Passed' if result == expected_outputs[i] else 'Failed'}\n")
