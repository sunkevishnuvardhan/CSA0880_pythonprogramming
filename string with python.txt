def is_match(s, p):
    m, n = len(s), len(p)
    
    # Create a DP table with (m+1) x (n+1) dimensions
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    
    # Base case: empty string matches empty pattern
    dp[0][0] = True
    
    # Handle patterns like a*, a*b*, a*b*c* which can match an empty string
    for j in range(1, n + 1):
        if p[j - 1] == '*':
            dp[0][j] = dp[0][j - 2]
    
    # Fill the DP table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if p[j - 1] == '.' or p[j - 1] == s[i - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] if p[j - 2] == '.' or p[j - 2] == s[i - 1] else False)
    
    return dp[m][n]

# Test cases
test_cases = [
    ("aa", "a"),
    ("aa", "a*"),
    ("ab", ".*"),
    ("aab", "c*a*b"),
    ("mississippi", "mis*is*p*."),
]

expected_outputs = [
    False,
    True,
    True,
    True,
    False,
]

# Run and print test cases
for i, (s, p) in enumerate(test_cases):
    result = is_match(s, p)
    print(f"Input: s = {s}, p = {p}")
    print(f"Output: {result}")
    print(f"Expected: {expected_outputs[i]}")
    print(f"Test {'Passed' if result == expected_outputs[i] else 'Failed'}\n")
